generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
} 

model Profile {
  id          String @id @default(uuid())
  userId      String @unique
  name        String
  imageUrl    String @db.Text
  email       String @db.Text

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  addresses   Address[]
  businesses  Business[]
  reviews     Review[]
  orders      Order[]

  cart        Cart?
}

model Business {
  id                  String @id @default(uuid())
  name                String
  bio                 String?
  category            String?
  openHour            String?
  closeHour           String?
  deliveryHourStart   String?
  deliveryHourEnd     String?
  rating              Float?
  visibleInApp        Boolean @default(false)
  approved            Boolean @default(false)

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  ownerId             String
  owner               Profile @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  reviews             Review[]
  mealCategories      MealCategory[]
  meals               Meal[]

  menu                Menu?
  location            Location?

  @@index([ownerId])
}

model Location {
  id              String @id @default(uuid())
  longitude       Float
  latitude        Float
  street1         String
  street2         String?
  city            String
  postalCode      String
  country         String?
  deliveryRange   Int

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  businessId      String @unique
  business        Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([businessId])
}

model Address {
  id          String @id @default(uuid())
  address     String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  profileId   String @unique
  profile     Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Review {
  id            String @id @default(uuid())
  title         String
  content       String @db.Text
  rating        Float
  approved      Boolean

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  profileId     String
  profile       Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  businessId    String @unique
  business      Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([profileId])
  @@index([businessId])
}

model Menu {
  id            String @id @default(uuid())
  active        Boolean @default(false)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  meals         Meal[]

  businessId    String @unique
  business      Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
}

model MealCategory {
  id            String @id @default(uuid())
  name          String
  description   String?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  meals         Meal[]

  businessId    String
  business      Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([businessId])
}

model Meal {
  id            String @id @default(uuid())
  name          String
  description   String?
  price         Float
  active        Boolean @default(false)
  featured      Boolean @default(false)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  categoryId    String
  category      MealCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  menuId        String? 
  menu          Menu? @relation(fields: [menuId], references: [id])

  businessId    String
  business      Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  cartId        String? 
  cart          Cart? @relation(fields: [cartId], references: [id])

  orderId       String? 
  order         Order? @relation(fields: [orderId], references: [id])

  @@index([categoryId])
  @@index([menuId])
  @@index([cartId])
  @@index([orderId])
  @@index([businessId])
}

model Cart {
  id            String @id @default(uuid())
  note          String? @db.Text
  total         Float

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  meals         Meal[]
  order         Order?

  profileId     String @unique
  profile       Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

enum OrderType {
  PENDING
  NEW
  PAID
  DELIVERED
}

model Order {
  id            String @id @default(uuid())
  status        OrderType @default(NEW)
  total         Float

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  meals         Meal[]

  cartId        String @unique
  cart          Cart @relation(fields: [cartId], references: [id])

  profileId     String
  profile       Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}
